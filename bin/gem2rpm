#!/usr/bin/env ruby
# -*- ruby -*-

$LOAD_PATH.push(File.expand_path(File.dirname(__FILE__) + "/../lib"))

require 'gem2rpm'
require 'fileutils'
require 'tmpdir'
require 'open-uri'
require 'uri'

options = begin
  Gem2Rpm::Configuration.instance.options
rescue Gem2Rpm::Configuration::InvalidOption => e
  Gem2Rpm.show_message(e)
  exit(1)
end
if options[:templates]
  Gem2Rpm.show_templates
  exit(0)
end
if options[:version]
  Gem2Rpm.show_version
  exit(0)
end

rest = options[:args]

template = nil
template_file = options[:template_file]
if template_file.nil? && File.exist?('/etc/os-release')
  File.read('/etc/os-release').each_line(chomp: true) do |line|
    line.match(%r{^ID=(.*)$}) { |m| template_file = m[1] }
  end
  if template_file.eql? '"opensuse-tumbleweed"'
    $stderr.puts 'Using template opensuse on Tumbleweed'
    template_file = 'opensuse'
  end
end
if template_file.nil?
  template = Gem2Rpm::TEMPLATE
else
  template_file = File.join(Gem2Rpm.template_dir, "#{template_file}.spec.erb") unless File.exist?(template_file)
  begin
    template = File.read(template_file)
  rescue Errno::ENOENT
    $stderr.puts "Could not open template #{template_file}. Aborting"
    exit(1)
  end
end

if options[:print_template_file]
  puts template.read
  exit 0
end

if rest.size != 1
  Gem2Rpm.show_message('Missing GEMFILE')
  exit(1)
end
gemfile = rest[0]
out_dir = options[:directory]
unless File.directory?(out_dir)
  Gem2Rpm.show_message("No such directory #{out_dir}")
  exit(1)
end

if options[:fetch]
  gem_uri = ''
  begin
    URI("https://rubygems.org/api/v1/gems/#{gemfile}.json").open do |f|
      gem_uri = f.read.match(/"gem_uri":\s*"(.*?)",/m)[1]
      gemfile = URI.parse(gem_uri).path.split('/').last
      gemfile = File.join(out_dir, gemfile)
      open(gemfile, 'w') do |gf|
        gf.write(URI(gem_uri).open.read)
      end
    end
  rescue OpenURI::HTTPError => e
    Gem2Rpm.show_message("Gem fetch failed with error: #{e.message}")
    exit(1)
  end
end

unless File.exist?(gemfile)
  Gem2Rpm.show_message("Invalid GEMFILE #{gemfile}")
  exit(1)
end

if options[:deps]
  Gem2Rpm.print_dependencies(gemfile)
  exit 0
end

output_spec = StringIO.new
Gem2Rpm.convert(gemfile, template, output_spec, options[:nongem], options[:local], options[:doc_subpackage])

# Save or print a specfile.
if options[:output_file]
  File.open(options[:output_file], "w") do |f|
    f.puts(output_spec.string)
  end
else
  puts output_spec.string unless options[:srpm]
end

# Create a SRPM.
if options[:srpm]
  gemname = Gem2Rpm::Package.new(gemfile).spec.name
  Dir.mktmpdir "gem2rpm-#{gemname}-" do |srpmdir|
    specfile = File.join(srpmdir, "rubygem-#{gemname}.spec")

    File.open(specfile, "w") do |f|
      f.puts(output_spec.string)
    end

    FileUtils.copy(gemfile, srpmdir)

    command =
      "rpmbuild -bs --nodeps " +
      "--define '_sourcedir #{srpmdir}' " +
      "--define '_srcrpmdir #{out_dir}' " +
      specfile

    unless system(command)
      Gem2Rpm.show_message("Command failed: #{command}")
      exit(1)
    end
  end
end
