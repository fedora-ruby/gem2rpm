#!/usr/bin/env ruby
# -*- ruby -*-

$LOAD_PATH.push(File.expand_path(File.dirname(__FILE__) + "/../lib"))

require 'gem2rpm'
require 'optparse'
require 'fileutils'
require 'open-uri'
require 'uri'

options = begin
  config = Gem2Rpm::Configuration.instance
  exit(0) if config.finish?
  config.options
rescue Gem2Rpm::Configuration::ConfigurationError => e
  Gem2Rpm.show_message(e)
  exit(1)
end

rest = options[:args]

template = begin
  Gem2Rpm::Template.find options[:template_file], :gem_file => rest[0]
rescue Gem2Rpm::Template::TemplateError => e
  $stderr.puts e
  exit(1)
end

if options[:print_template_file]
  puts template.read
  exit 0
end

if rest.size != 1
  Gem2Rpm.show_message('Missing GEMFILE')
  exit(1)
end
gemfile = rest[0]
out_dir = options[:directory]
unless Dir.exist?(out_dir)
  Gem2Rpm.show_message("No such directory #{out_dir}")
  exit(1)
end

if options[:fetch]
  gem_uri = ''
  open("https://rubygems.org/api/v1/gems/#{gemfile}.json") do |f|
    gem_uri = f.read.match(/"gem_uri":\s*"(.*?)",/m)[1]
    gemfile = URI.parse(gem_uri).path.split('/').last
    gemfile = File.join(out_dir, gemfile)
    open(gemfile, 'w') do |gf|
      gf.write(open(gem_uri).read)
    end
  end
end

unless File.exist?(gemfile)
  Gem2Rpm.show_message("Invalid GEMFILE #{gemfile}")
  exit(1)
end
srpmdir = nil
specfile = nil
if options[:srpm]
  gemname = Gem2Rpm::Package.new(gemfile).spec.name
  srpmdir = `/bin/mktemp -t -d gem2rpm-#{gemname}.XXXXXX`.chomp
  specfile = File.join(srpmdir, "rubygem-#{gemname}.spec")
  options[:output_file] ||= specfile
end

# Produce a specfile
if options[:output_file].nil?
  Gem2Rpm.convert(gemfile, template, $stdout, options[:nongem], options[:local], options[:doc_subpackage]) unless options[:deps]
else
  begin
    out = open(options[:output_file], "w")
    Gem2Rpm.convert(gemfile, template, out, options[:nongem], options[:local], options[:doc_subpackage])
  ensure
    out.close
  end
end

# Create a  source RPM
if options[:srpm]
  FileUtils.copy(options[:output_file], specfile) unless File.exist?(specfile)
  FileUtils.copy(gemfile, srpmdir)

  command = "rpmbuild -bs --nodeps --define '_sourcedir #{srpmdir}' " +
    "--define '_srcrpmdir #{out_dir}' #{specfile}"
  unless system(command)
    Gem2Rpm.show_message("Command failed: #{command}")
    exit(1)
  end
end

Gem2Rpm.print_dependencies(gemfile) if options[:deps]
