# Generated from <%= File::basename(format.gem_path) %> by gem2rpm -*- rpm-spec -*-
<% if scl -%>
%{?scl:%scl_package rubygem-%{gem_name}}
%{!?scl:%global pkg_name %{name}}

<% end -%>
%global gem_name <%= spec.name %>
<%# TODO: Try to check against spec.required_ruby_version -%>
%global rubyabi 1.9.1

Summary: <%= spec.summary.gsub(/\.$/, "") %>
Name: <%= if scl then '%{?scl_prefix}' end %>rubygem-%{gem_name}
Version: <%= spec.version %>
Release: 1%{?dist}
Group: Development/Languages
License: <%= spec.licenses.join(" and ") %>
<% if spec.homepage -%>
URL: <%= spec.homepage %>
<% end -%>
Source0: <%= download_path %>%{gem_name}-%{version}.gem
Requires: <%= if scl then '%{?scl_prefix}' end %>ruby(abi) = %{rubyabi}
<% for req in spec.required_rubygems_version -%>
Requires: <%= if scl then '%{?scl_prefix}' end %>ruby(rubygems) <%= req %>
<% end -%>
<% for d in spec.runtime_dependencies -%>
<% for req in d.requirement -%>
Requires: <%= if scl then '%{?scl_prefix}' end %>rubygem(<%= d.name %>) <%= req  %>
<% end -%>
<% end -%>
BuildRequires: <%= if scl then '%{?scl_prefix}' end %>ruby(abi) = %{rubyabi}
<% for req in spec.required_rubygems_version -%>
BuildRequires: <%= if scl then '%{?scl_prefix}' end %>rubygems-devel <%= req %>
<% end -%>
<%# TODO: Unfortunatelly this do not match with ruby(abi) yet -%>
<% for req in spec.required_ruby_version -%>
BuildRequires: <%= if scl then '%{?scl_prefix}' end %>ruby<%= "-devel" unless spec.extensions.empty? %> <%= req %>
<% end -%>
<% if spec.extensions.empty? -%>
BuildArch: noarch
<% end -%>
Provides: <%= if scl then '%{?scl_prefix}' end %>rubygem(%{gem_name}) = %{version}

%description
<%= spec.description %>

<% if doc_subpackage -%>
%package doc
Summary: Documentation for %{name}
Group: Documentation
Requires: %{name} = %{version}-%{release}
BuildArch: noarch

%description doc
Documentation for %{name}
<% end # if doc_subpackage -%>

%prep
%setup -q -c -T
mkdir -p .%{gem_dir}
<% unless spec.extensions.empty? -%>
export CONFIGURE_ARGS="--with-cflags='%{optflags}'"
<% end -%>
<% if scl -%>
<%# We want to avoid newline when scl is false, but not when it is true; therefore we can't use this: -%>
<%#= if scl then '%{?scl:scl enable %{scl} "}' end -%>
%{?scl:scl enable %{scl} "}
<% end -%>
gem install --local --install-dir .%{gem_dir} \
<% unless spec.executables.nil? or spec.executables.empty? -%>
            --bindir .%{_bindir} \
<% end -%>
<% unless spec.extensions.empty? -%>
            -V \
<% end -%>
            --force %{SOURCE0}
<% if scl -%>
%{?scl:"}
<% end %>
%build

%install
mkdir -p %{buildroot}%{gem_dir}
cp -pa .%{gem_dir}/* \
        %{buildroot}%{gem_dir}/

<% unless spec.extensions.empty? -%>
mkdir -p %{buildroot}%{gem_extdir}/<%= spec.require_paths.first %>
# TODO: move the extensions
##mv %{buildroot}%{gem_instdir}/<%= spec.require_paths.first %>/shared_object.so %{buildroot}%{gem_extdir}/<%= spec.require_paths.first %>/
<% end -%>

<% unless spec.executables.nil? or spec.executables.empty? -%>
mkdir -p %{buildroot}%{_bindir}
cp -pa .%{_bindir}/* \
        %{buildroot}%{_bindir}/
<% end -%>

<% unless spec.executables.empty? -%>
find %{buildroot}%{gem_instdir}/bin -type f | xargs chmod a+x
<% end -%>

<% if scl -%>
# Fix shebangs for SCL
%{?scl:find %{buildroot} -type f -exec xargs sed -i 's|#!/usr/bin/ruby|#!/usr/bin/env ruby|' {} \;}
<% end -%>

%files
%dir %{gem_instdir}
<% unless spec.executables.nil? or spec.executables.empty? -%>
<% for f in spec.executables -%>
%{_bindir}/<%= f %>
<% end -%>
%{gem_instdir}/bin
<% end -%>
%{gem_libdir}
<% unless spec.extensions.empty? -%>
<%# TODO: Is it possible to delete the folder specified by the spec.extensions? -%>
%exclude %{gem_instdir}/ext
%{gem_extdir}
<% end -%>
<% unless doc_subpackage -%>
%doc %{gem_docdir}
<% for f in spec.extra_rdoc_files -%>
%doc %{gem_instdir}/<%= f %>
<% end -%>
<% end -%>
%exclude %{gem_cache}
%{gem_spec}

<% if doc_subpackage -%>
%files doc
%doc %{gem_docdir}
<% for f in spec.extra_rdoc_files -%>
%doc %{gem_instdir}/<%= f %>
<% end -%>
<% end # if doc_subpackage -%>

%changelog
* <%= Time.now.strftime("%a %b %d %Y") %> <%= packager %> - <%= spec.version %>-1
- Initial package
